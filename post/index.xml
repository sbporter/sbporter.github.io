<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on Seth&#39;s Blog</title>
    <link>http://sbporter.com/post/index.xml</link>
    <description>Recent content in Post-rsses on Seth&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Powered by [Hugo](http://gohugo.io).</copyright>
    <lastBuildDate>Wed, 02 Nov 2016 01:09:59 -0600</lastBuildDate>
    <atom:link href="http://sbporter.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>First Post</title>
      <link>http://sbporter.com/post/test/</link>
      <pubDate>Wed, 02 Nov 2016 01:09:59 -0600</pubDate>
      
      <guid>http://sbporter.com/post/test/</guid>
      <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&#34;swift&#34;&gt;
//
//  StatusOverlayButton.swift
//  Teal Command
//
//  Created by Seth Porter on 4/27/16.
//  Copyright Â© 2016 Pixio. All rights reserved.
//

import UIKit
import VortexSwift

class StatusOverlayButton: UIButton {
    var droneImageView = UIImageView()
    private var disconnectedSlash = SlashView()
    
    private var connectedLock: NSLock = NSLock(name: &#34;StatusOverlayButton.connectedLock&#34;)
    private var uuid: UUID = UUID()
    /// Property that sets the button state between connected and disconnected states
    var connected: Bool = false {
        didSet {
            if (connected) {
                disconnectedSlash.alpha = 0.0
            } else {
                disconnectedSlash.alpha = 1.0
            }
        }
    }
    
    override var isHighlighted: Bool {
        didSet {
            if (isHighlighted) {
                droneImageView.tintColor = Colors.glowTeal
            } else {
                droneImageView.tintColor = Colors.solidBlue
            }
        }
    }
        
    override init(frame: CGRect) {
        super.init(frame: frame)
        
        var homeButtonImage: UIImage = UIImage(named: &#34;droneIcon&#34;)!
        homeButtonImage = homeButtonImage.withRenderingMode(UIImageRenderingMode.alwaysTemplate)
        
//        self.setBackgroundColor(Colors.glowTeal, forState: UIControlState.highlighted)
        
        droneImageView = UIImageView(image: homeButtonImage)
        droneImageView.contentMode = .scaleAspectFit
        droneImageView.translatesAutoresizingMaskIntoConstraints = false
        droneImageView.tintColor = Colors.solidBlue
        self.addSubview(droneImageView)
        
        disconnectedSlash.translatesAutoresizingMaskIntoConstraints = false
        disconnectedSlash.backgroundColor = UIColor.clear
        disconnectedSlash.isUserInteractionEnabled = false
        self.addSubview(disconnectedSlash)
        
        addViewContraints()
        registerForStatusCallbacks()
    }
    
    deinit {
        unregisterForStatusCallbacks()
    }
    
    func addViewContraints() {
        droneImageView.autoPinEdgesToSuperviewEdges()
        disconnectedSlash.autoPinEdgesToSuperviewEdges()
    }

    private func registerForStatusCallbacks() {
        MessageConnectionManager.instance.setStatusCallback({ [weak self](connectionStatus: MessageConnection.MessageConnectionStatus) in
            guard let _self = self else {
                return
            }
            _self.connectedLock.execute {
                _self.connected = (connectionStatus == .connected)
            }
        }, ownerUUID: uuid)
    }

    private func unregisterForStatusCallbacks() {
        MessageConnectionManager.instance.removeStatusCallback(ownerUUID: uuid)
    }
    
//    func setBackgroundColor(_ color: UIColor, forState: UIControlState) {
//        UIGraphicsBeginImageContext(CGSize(width: 1, height: 1))
//        UIGraphicsGetCurrentContext()?.setFillColor(color.cgColor)
//        UIGraphicsGetCurrentContext()?.fill(CGRect(x: 0, y: 0, width: 1, height: 1))
//        let colorImage = UIGraphicsGetImageFromCurrentImageContext()
//        UIGraphicsEndImageContext()
//        
//        self.setBackgroundImage(colorImage, for: forState)
//    }
    
    
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
    }
    
    
    private class SlashView: UIView {
        
        override func draw(_ rect: CGRect) {
            super.draw(rect)
            
            let slashPath = UIBezierPath()
            slashPath.move(to: CGPoint(x: self.bounds.width, y: 0))
            slashPath.addLine(to: CGPoint(x: 0, y: self.bounds.height))
            UIColor.red.setStroke()
            slashPath.lineWidth = 2.0
            slashPath.stroke()
        }
    }
}

&lt;/code&gt;
&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>